        NoSQL 과 MongoDB

웹 애플리케이션과 데이터베이스는 서로 끊을 수 없는 관계에 있다. 이 책에선 많은 분량을 할애해서 데이터베이스 처리에
관해 설명하고 있다. 그리고 이 설명들은 'SQL' 데이터베이스를 기본 전제로 하고 있다.
데이터베이스의 경우 'SQL' 이라는 데이터 처리 언어를 도입한 것이 폭넓게 사용되고 있다.
또한, 대부분의 개발에선 데이터베이스 종류만 다르지 이 SQL 데이터베이스를 사용하고 있다.
하지만 최근에는 SQL 을 사용하지 않는 'NoSQL' 이라는 데이터베이스도 그 사용 폭을 넓히고 있다.

    모든 것이 관계형(relational)일 필요는 없다!

SQL 데이터베이스는 관계형 데이터베이스라고 불린다. 데이터를 표라는 형태로 관리하고 데이터 간 관계를 설정해서
복잡한 데이터 구조를 관리할 수 있는 강력한 시스템이다.

하지만 데이터베이스를 사용하는 대부분은 '그렇게 고급 기능은 없어도 돼' 하는 경우가 많다.
관계형 데이터베이스는 복잡한 구조를 구현하기 때문에 데이터 읽기/쓰기에 많은 시간이 걸리는 경우가 있다.
하지만 애플리케이션에 따라선 '더 단순해도 괜찮으니까 무조건 빠르게 처리하고 싶다' 는 경우도 있다.
이런 경우에는 SQL 데이터베이스는 적합하지 않다.

더 단순하고 더 빠르게 처리하기 위해서는 SQ: 를 지양하는 것이 좋다. SQL 를 사용하지 않고 간단히
데이터 읽기/쓰기를 가능하게 한 데이터베이스가 바로 NoSQL 데이터베이스다.

    몽고 DB 와 문서 지향 데이터베이스

이 NoSQL 데이터베이스도 현재 많은 제품이 출시되고 있다. 이 책에선 몽고 DB 를 사용하겠다.

몽고 DB 는 문서 지향 데이터베이스라고도 불린다. 일반 데이터베이스는 데이터를 테이블과 레코드라는 형태로 저장하지만
몽고 DB 에선 '거대한 텍스트 파일' 로 저장한다.

데이터베이스 파일은 자바스크립트의 JSON 과 비슷한 형식으로 기술돼 있다.
저장되는 데이터는 'JSON 형식으로 작성된 객체의 컬렉션' 이라고 볼 수 있다.
JSON 과 비슷한 형식이므로 NoSQL 임에도 불구하고 복잡한 구조의 값을 저장할 수가 있다.
또한, 테이블 형태의 레코드를 설계할 필요 없이 자유롭게 값을 저장할 수 있다.

        MongoDB 설정하기

몽고디비를 설치하자.

    몽고 DB 실행하기

몽고 DB 는 데이터베이스 서버 프로그램으로 실행하면 사용할 수 있다.
그렇다고해서 시각적인 툴이 존재하는 것은 아니며 프로그램으로부터 몽고 DB 데이터베이스에 접속해서 데이터를 추가하거나
추출하는 것이다.

몽고 DB 의 윈도의 경우 Program Files 폴더의 MongoDB 폴더에 설치된다.
이 안의 Server 폴더 내에 있는 것이 몽고 DB 관련 파일이다. bin 폴더 내의 mongod.exe 파일을 실행하자.
이것이 데이터베이스 서버 프로그램이다. 실행하면 명령 프롬프트가 열리고 몽고 DB 의 서버 프로그램이 실행된다.
종료할 때는 명령 프롬프트의 창을 닫기만 하면 된다.

    pom.xml 에 설정 추가

몽고 DB 를 사용하려면 스프링 부트 애플리케이션에 라이브러리를 추가해야 한다. pom.xml 을 열어서
디펜던시 태그에 다음 태그를 추가한다.

    pom.xml

이것으로 라이브러리가 설치돼서 몽고 DB 사용을 위한 기능들이 애플리케이션에 적용된다.
이제 데이터베이스 사용을 위한 클래스만 작성하면 된다.

        DataMongo 엔터티 작성

몽고 DB 를 사용하기 위한 엔터티 클래스를 작성해보자. 몽고 DB 는 문서 기반의 DB 로 자유로운 형태로
데이터를 보관할 수 있다. 하지만 실제로 이용 시에는 정해진 형식으로 데이터를 저장하지 않으면 처리가 복잡해진다.
JPA 를 사용하는 경우는 일반 데이터베이스와 마찬가지로 엔터티를 만들어서 사용해야 한다.

    MyDataMongo.java

ID 는 이른바 주 키에 해당한다. 몽고 DB 에선 ID로 String 을 사용할 수 있다. 이를 통해 랜덤하게 생성된 키를
데이터 식별용으로 저장할 수 있다.
클래스 자체는 그렇게 복잡하지 않다. 일단 여기선 생성자와 Getter 메소드만 설정해두었다.
또한, 엔터티 클래스임에도 @Entity 어노테이션이 없는 것을 의아할 수 있는데, 몽고 DB 는
일반 MySQL 과는 다른 구조로 동작하므로 테이블과 연동되는 @Entity 를 사용하지 않고 아주 일반적은 클래스로 작성한다.

        MongoRepository 작성하기

스프링 부트에선 데이터베이스 처리에 리포지터리를 사용하는 것이 기본이었다. 몽고 DB 를 사용하는 경우도 이 점은 동일하다.
그러면 몽고 DB 에 접속하기 위한 리포지터리를 만들어보자.

    MyDataMongoRepository.java

몽고 DB 용 리포지터리는 MongoRepository 라는 인터페이스를 상속해서 작성한다.
JpaRepository 와는 다른 것으로 spring-boot-starter-data-mongodb 에 의해 추가된 라이브러리에 있다.
JpaRepository 와는 다르지만 기본적인 구조나 자동 생성된 메소드 등은 거의 같다고 봐도 된다.

        컨트롤러 수정하기

리포지터리를 사용해서 몽고 DB 에 데이터를 저장하거나 저장한 데이터를 표시하는 처리를 작성해보자.
HeloController.java 를 열어서 다음과 같이 코드를 수정한다.

    HeloController07.java

@Autowired 로 MyDataMongoRepository 만 설정하고 있다. 다른 리포지터리나 서비스 등은 사용하고 있지 않다.

    @RequestParam 에 의한 데이터 교환

index.html 에 폼을 두고, 폼을 POST 로 전송한 데이터로 엔터티를 만들어 몽고 DB 에 저장한다.
단, MyDataMongo 클래스에선 name 과 memo 에만 값이 대입되고 나머지 ID 와 Data 는 인스턴스 작성 시에 자동으로
할당되게끔 설계했다. 따라서 폼에는 두 개의 입력 필드만 두고 이 필드들을 전송 한 데이터를 new MyDataMongo 하게 했다.
그루비 기반 앱에서도 사용했지만 폼이 전송한 값은 @RequestParam 어노테이션을 설정해서 받을 수 있었다.
이 값들을 가지고 MyDataMongo 인스턴스를 작성하고 있다.

    save 를 사용한 저장

작성한 인스턴스의 저장은 MongoRepository 에 설정한 save 메소드에 의해 이루어진다.
이 메소드는 저장할 객체를 인수로 설정해서 호출하는 것이 전부다. 알고 보면 아주 간단하다.

        템플릿 수정하기

마지막으로 템플릿을 수정해보자.

    index07.html

완료 후 접속하면 입력 폼과 데이터 목록이 표시된다. 폼에 이름과 메모 내용을 적어서 전송하면 몽고 DB 에 저장된다.
저장된 데이터는 폼 아래에 있는 테이블에 모두 표시된다.

        검색 메소드 추가

기본적인 방법을 알았으니 리포지터리의 자동 생성 메소드를 사용해보자.
여기서는 name 을 검색하는 메소드를 추가한다.
MyDataMongoRepository 를 열어서 다음 코드를 추가한다.

    MyDataMongoRepository08.java

이것으로 name 을 이용해서 검색하는 메소드가 추가된다. 리포지터리이므로 구체적인 처리를 작성하지 않아도 된다.
그러면 이 메소드를 사용한 검색 페이지를 만들어보자.

    컨트롤렁에 리퀘스트 핸들러 추가

먼저 컨트롤러 처리부터 보자. HeloController 클래스에 다음과 같이 리퀘스트 핸들러의 메소드를 추가한다.

    HeloController08.java

POST 전송 후의 처리는 search 메소드를 사용하고 있다. @RequestParam 을 인수로 지정해서 find 라는 값을 받는다.
여기선 추출한 param 을 이용해서,


    List<MyDataMongo> list = repository.findByName(param);


이와 같은 방식으로 name 을 사용한 검색 결과를 가져오고 있다. 이 부분의 리포지터리 사용 방법은
JpaRepository 와 동일하다는 것을 알 수 있다.

    템플릿 수정

검색용 템플릿을 수정해보자.

    find08.html

이것으로 완성이다. 입력 필드에 텍스트를 적어서 전송해보자. MyDataMongo 의 name 값이 필드에 기입한 값과
같은 것을 검색해서 표시한다. 여기선 폼 안에,


    <input type="text" name="find" size="20"
                        th:value="${value}" />


이와 같은 입력 필드를 설정하고 있다. 이 값이 컨트롤러의 리퀘스트 핸들러에서 find 라는 인수로 전달되는 것이다.
기본적인 사용법을 알았으니 MyDataMongoRepository 에 다양한 메소드를 추가해가며 동작을 확인해보자.
데이터베이스의 종류는 달라도 기본적인 사용법은 SQL 데이터베이스와 거의 같다는 것을 알았다.
MongoRepository 는 JpaRepository 와 같은 구조로 설계되어 있으므로 JpaRepository 만 제대로 이해하면 문제없이
사용할 수 있다.

데이터베이스가 SQL 이든 NoSQL 이든 '리포지터리를 작성해서 호출한다' 는 기본만 제대로 알고 있으면
나머지는 모두 같은 방식으로 처리하면 된다. 이것은 스프링 부트의 큰 이점이기도 하다.
이 기회에 '일반적인 SQL 데이터베이스' 뿐만 아니라 다른 종류의 데이터베이스도 스프링 부트를 통해 경험해보자.