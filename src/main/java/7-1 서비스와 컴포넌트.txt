        서비스란

앞서 JPA 를 사용한 데이터베이스 처리에 대해 살펴보았지만, 기본적으로는 '클래스를 정의해서 인스턴스를 만들고
그 메소드를 호출한다' 는 자바의 기본 코딩 방식을 따르고 있다.
하지만 스프링 프레임워크는 'DI 를 사용한 Bean(빈) 작성' 을 중심으로 구축돼 있기 때문에 더 간단한 코딩 방법이
있을 법도 하다.
사실 지금까지의 설명은 '스프링다운 개발 스타일' 을 거의 사용하지 않았다. 리포지터리는 스프링의 기능이지만 JPA 기능을
활용하기 위해 만든 DAO 클래스는 '스프링다운' 기능이라고 할 수 없다.
이런 DAO 클래스와 같은 기능을 좀 더 스프링다운 프로그램으로 다시 만들어 주는 것이 서비스다.

    서비스 계층에 대해

비즈니스 로직 중에 애플리케이션에서 사용할 수 있게 컴포넌트화 부분을 '서비스 계층' 이라고 한다.
컨트롤러나 모델을 사용하는 DAO 등과 달리 언제 어디서든지 호출해서 사용할 수 있는 클래스다.
스프링 부트 프로그램은 개별 애플리케이션(MVC 와 세트로 구축된 프로그램) 계층과 프로그램 전체를 지탱하고 있는
기반 계층(도메인 계층)으로 나누어 생각할 수 있다. 5장의 리포지터리 등도 이 도메인 계층에 해당한다.
도메인 계층에 있는 것은 특정 컨트롤러나 모델 등에는 존재하지 않는다. 프로그램 내에 몇 개의 컨트롤러나
모델이 있든지 모두 자유롭게 호출할 수 있다. '컨트롤러와 비즈니스 로직(모델) 양쪽 에서 자유롭게 호출' 할 수 있는
것이 서비스라고 보면 된다.


                애플리케이션 계층

        컨트롤러                    모델

        리퀘스트 핸들러            비즈니스 로직
                                   엔터티


                도메인 계층

        서비스                     리포지터리


스프링 프레임워크에선 이 서비스 부분을 Bean 으로 등록해서 어노테이션으로 설정하면 언제든지 사용할 수 있다.
6장의 DAO 클래스는 필요에 따라 인스턴스를 작성했지만 서비스에선 이런 처리가 불필요하다.
그러면 실제로 서비스를 만들어서 사용해보자.

    MyDataService 만들기

간단한 서비스를 만들어보자. 여기서는 'MyDataService' 라는 이름의 서비스를 만들겠다.

    MyDataService.java

아주 간단한 클래스다. 다른 클래스를 상속하지 않는 단순한 POJO 클래스(상속 관계 등을 사용하지 않은 아주 단순한 구조의
클래스)다. 여기선 모든 엔터티를 가져오는 getAll 과 id 를 지정해서 엔터티를 가져오는 get 그리고 name 필드의
텍스트를 검색해서 엔터티를 가져오는 find 의 세 가지 메소드를 설정하고 있다. 메소드에는 특별히 새로운 코드가 없지만
다른 곳에 몇 가지 새로운 기능이 등장하고 있다. 바로 어노테이션 부분이다.

    @Service

이것이 이 클래스를 서비스로 등록하기 위한 어노테이션이다. 서비스 클래스는 클래스명 앞에 어노테이션을 붙여 둔다.

    @PersistenceContext

EntityManager 의 빈을 자동으로 할당하는 것이었다. 6장에선 컨트롤러 클래스 측에 이 어노테이션을 사용해서 EntityManager를
설정했지만 여기선 서비스에 EntityManager 를 설정해서 사용하고 있다.

        컨트롤러에서 서비스 Bean 사용

컨트롤러의 메소드를 수정해서 DAO 대신 서비스 빈을 사용해 데이터베이스에 접속하도록 수정해보자.

    HeloController.java

"/" 의 리퀘스트 핸들러 처리를 MyDataService 의 getAll 을 이용하게 수정했다. 여기선 다음과 같은 방식으로
서비스 Bean 을 필드에 연동하고 있다.


    @Autowired
    private MyDataService service;


@Autowired 스프링 프레임워크에서 설정한 Bean 을 지정한 변수에 자동으로 할당한다. 예에서는 MyDataService 의
Bean 인스턴스를 할당하고 있다.
MyDataService 클래스에는 @Service 어노테이션이 기술돼 있다. 이 어노테이션을 통해 자동으로 MyDataService 가
애플리케이션 내에서 Bean 으로 설정되며 이것이 @Autowired 에 의해 필드에 할당되는 것이다.
"/find" 리퀘스트 핸들러도 설정하고 있다. 이것은 간단한 검색 기능을 구현한 것이다.
앞서 작성한 find.html 을 템플릿으로 이용하고 있다.
이 메소드들은 엔터티를 불러오기 위해 다음과 같이 MyDataService 를 사용하고 있다.


    모든 엔터티 가져오기
    List<MyData> list = service.getAll();


    엔터티 검색
    List<MyData> list = service.find(param);


코드를 보면 인스턴스 변수 service 에 객체를 대입한 적이 없음에도 불구하고 service.getAll(); 을 호출하면 제대로
MyData 에 저장돼 있는 엔터티의 컬렉션이 반환된다. MyDataService 인스턴스가 존재하며 정상적으로 동작하고 있다는 것을
알 수 있다.

        RestController 작성하기

작성한 MyDataService 는 스프링 부트 애플리케이션 내에서 사용하는 서비스다. 웹 애플리케이션 개발에선 '서비스' 라고
하면 '외부에서 접속해서 필요한 정보를 받아오는 웹 프로그램' 을 가리키는 것이 일반적이다. 즉, MyDataService 가
'private 서비스' 라고 하면 웹의 경우 'public 서비스' 에 해당하는 것이다.
이렇게 외부에서 사용할 수 있는 서비스라는 것도 스프링 부트로 만들 수 있다. 아니 좀 더 정확히는 이미 만든 적이 있다.
3장에서 RestController 가 바로 그것으로 REST 서비스를 작성하기 위한 컨트롤러였다.
그러면 RestController 를 작성해서 REST 서비스를 만들어보자. 이번에는 MyDataRestController 라는 클래스 형태로 만들자.

    MyDataRestController.java

완료하였다면 실행해보자. "/rest" 에 접속하면 전체 엔터티가 표시되며 "/rest/1" 에 접속하면 ID = 1 인 엔터티가 표시된다.
엔터티는 모두 JSON 형식의 텍스트로 출력된다.

        자바스크립트에서 서비스 사용해보기

실제에 이 서비스를 사용해보자. 여기서는 자바스크립트의 Ajax 를 사용해서 MyData 를 추출해보겠다.
템플릿인 index.html 에 스크립트를 추가해서 예제 코드를 만들어본다. 다음 코드를 참고해서 index.html 의
<script> 부분과 <body> 부분을 수정한다.

    Ajax 처리의 흐름

여기선 쿼리 스트링으로 ID 번호를 지정해서 접속하면 MyDataRestController 에서 접속해서 지정한 MyData 를 불러와
표시하고 있다. 이 흐름에서 자바스크립트가 어떤 식으로 실행되는지 보자.


    1 제이쿼리(jQuery) 불러오기

    <script src="http://code.jquery.com/jquery.min.js"></script>

    제이쿼리를 사용하고 있다. 구글의 CDN 을 이용해서 스크립트를 불러오고 있으므로 별도로 제이쿼리를
    설치하지 않아도 된다.

    2 페이지 로드 시에 Ajax 통신 실행

    $(document).ready(function() {
        var num = [[${param.id[o]}]];
        $.get("/rest/" + num, null, callback);
    });


이것이 Ajax 로 MyDataRestController 에 접속하는 부분이다. $(document).ready() 는 document 의 로드가 끝난 시점에
실행되는 처리다. ready 의 인수로 설정된 함수에는 다음 두 줄의 코드가 존재한다.
첫 번째 코드는 다음과 같다.


    var num = [[${param.id[o]}]];


쿼리 스트링에서 ID 값을 가져와서 변수 num 에 설정하는 부분이다. /*[[${param.id[o]}]];*/ 는 이미 설명한 것처럼
쿼리 스트링으로 전달된 매개 변수 (id) 값을 출력하는 타임리프의 변수식이다.
두 번째 코드는 다음과 같다.


    $.get("/rest/" + num, null, callback);


$.get 은 제이쿼리의 기능으로 지정한 주소로 Ajax 통신을 시작한다. 실행 후, 세 번째 인수에 지정한
callback 함수가 호출돼서 필요한 처리가 실행된다.


    3 Ajax 통신 후의 처리


Ajax 통신이 종료되면 $.get 에 지정한 함수 callback 이 호출된다. 여기선 다음과 같이 필요한 정보를 표시하고 있다.


    $('#obj').append('<li>id: ' + result.id + '</li>');
    $('#obj').append('<li>name: ' + result.name + '</li>');
    $('#obj').append('<li>mail: ' + result.mail + '</li>');
    $('#obj').append('<li>age: ' + result.age + '</li>');
    $('#obj').append('<li>memo: ' + result.memo + '</li>');


인수 result 에는 Ajax 통신으로 받은 결과가 저장되지만 JSON 형식으로 받은 경우 제이쿼리에선 자바스크립트의 객체로
인식하게 된다. 따라서 객체 내의 값을 그대로 꺼내서 표시하기만 하면 된다.
append 는 제이쿼리 메소드로 $('#obj') 로 지정한 대상(id="obj" 인 요소)에 텍스트를 삽입한다.
이것으로 MyData 내용이 표시된다.

이와 같이 Ajax 를 사용하면 RestController 를 사용한 객체 전송이 놀라울 정도로 쉬워진다.
'RestController 측에선 자바 객체를 반환만 하면 되고', '자바스크립트 측에선 자바스크립트 객체를 받아서 처리만 하면' 된다.
귀찮은 값 변환 등을 고려하지 않고서도 데이터를 전송 및 교환할 수 있다.

        XML 로 데이터를 교환하려면?

JSON 형식으로 데이터를 교환하는 방법은 알았다. 그렇다면 XML 을 이용하고 싶은 경우는 어떻게 해야 할까?
XML 은 구조화된 데이터를 처리할 때 많이 사용된다. 웹 사이트의 변경 정보를 전달하는 RSS 등도 XML 형식으로 데이터를
전송한다. RestController 에서 XML 을 사용하려면 XML 데이터 형식을 해석해서 처리할 라이브러리가 필요하다.
여ㅛ기선 'Jackson DataFormat XML' 이라는 라이브러를 사용하자. pom.xml 파일을 열어서 디펜던시에 추가하자.

    pom.xml

이것으로 라이브러리가 애플리케이션에 적용된다. 다음은 필요한 코드를 추가하면 된다. 그다지 어렵지 않다.

    @XmlRootElement 어노테이션

먼저 MyData 클래스를 수정하겠다. MyData.java 파일을 열어서 MyData 클래스 선언부 바로 앞에 다음과 어노테이션을 추가한다.


    import javax.xml.bind.annotation.XmlRootElement;

    @Entity
    @Table(name = "mydata")
    @NamedQueries(
        @NamedQuery(
                name = "findByAge",
                query = "from MyData where age > :min and age < :max"
        )
    )
    @XmlRootElement // <---
    public class MyData {


클래스에는 이미 여러 개의 어노테이션이 설정돼 있으니 근처 아무 곳에나 추가하면 된다.
그 다음 다시 /rest 에 접속해보면 JSON 이 아닌 XML 구조로 텍스트가 출력된다.

예에선 @XmlRootElement 라는 어노테이션을 추가한 것이 전부다. @XmlRootElement 는 XML 데이터의 루트 요소임을
나타내는 것이다. 라이브러리를 추가해서 @XmlRootElement 어노테이션을 추가하면 RestController 가 반환하는 객체가 모두
XML 형식의 텍스트로 바뀐다. 자바라면 그대로 XML 을 파스(parse)해서 자바 클래스의 인스턴스로 사용할 수 있다.

        컴포넌트와 Bean

외부에서 접속할 수 있는 서비스를 살펴보았다. 이번에는 다시 애플리케이션 내부의 접속을 생각해보자.
MyDataService 같은 서비스는 애플리케이션 내의 프로그램에서 기능을 호출할 수 있다. 이와 비슷한 기능을 하는 것이
컴포넌트다. 컴포넌트는 애플리케이션 내에 자동 생성된 Bean 이다. 생성된 Bean 의 인스턴스는 @Autowired 로 바인딩해서
사용할 수 있다. '서비스와 비슷한 느낌' 이라고 생각할 수 있지만 사실은 서비스도 컴포넌트의 일종이다.
서비스는 '서비스 계층의 컴포넌트' 라고 보면 된다. 컴포넌트 자체는 어디서든 사용할 수 있지만 프로그램의 구성 등을 알기
쉽게 하려고 서비스 계층의 컴포넌트는 '서비스' 라는 형태로 처리한 것이다.

    컴포넌트 클래스 생성

실제로 컴포넌트를 만들어보자. 컴포넌트는 일반적인 자바 클래스로 작성한다.

    MySampleBean.java

이 예에선 생성자와 'counter' 라는 아주 단순한 메소드만 설정하고 있다. 이 컴포넌트에 있는 기능은 단순히
'숫자를 카운터하는 것' 이 전부다. 기본 설정에선 10까지 카운트한 후 다시 0으로 돌아간다.
단순하지만 컴포넌트의 기본적인 기능은 모두 갖추고 있다.

    @Component

클래스에는 @Component 라는 어노테이션 설정돼 있다. 이를 통해 이 클래스가 컴포넌트로 애플리케이션에 인식하게 된다.
컴포넌트 클래스에선 반드시 이 어노테이션을 설정해야 한다.
@Component 가 없으면 클래스의 인스턴스가 Bean 으로 등록된다.

    @Autowired

생성자에는 @Autowired 어노테이션이 설정돼 있다. 이것도 매우 중요한데, 이 클래스의 인스턴스가 Bean 으로 등록될 때에는
이 Autowired 가 지정된 생성자에 의해 인스턴스가 생성되게 된다.
@Autowired 가 붙은 생성자가 컴포넌트 클래스에 없으면 애플리케이션 실행 시에 오류가 발생한다.
반드시 설정하자.

    ApplicationArguments 에 대해

메소드에는 ApplicationArguments 라는 클래스의 인스턴스가 인수로 설정돼 있다. 이것은 애플리케이션이 실행돌 때
(@SpringBootApplication 이 지정된 클래스로 SpringApplication.run 이 실행될 때) 전달된 인수를 관리한다.
실행 시에 전달된 인수를 사용하는 경우는 이 인스턴스를 인수로 설정하면 된다.
메소드 내에선 getNonOptionArgs 메소드를 호출하고 있으며 애플리케이션 실행 시의 인수를 List 로 추출하는 역할을 한다.
여기선 추출한 List 의 첫 요소를 Integer.parseInt 로 정수로 변환해서 max 필드에 설정하고 있다.
즉, 매개변수를 사용해서 컴포넌드에 설정돼 있는 최댓값 필드(max)를 설정할 수 있게 한 것이다.
이 기능을 사용하기 위해서는 MyBootApplication 자바 클래스에 있는 main 메소드를 수정하면 된다.
예를 들면 다음과 같다.

    SpringBootApplication.java

이것으로 max 의 값을 '100' 으로 변경할 수 있다. 즉, 100까지 카운트하면 0으로 돌아가는 것이다.

    컴포넌트 사용하기

그러면 컴포넌트를 사용하자. MyDataRestController 클래스에 리퀘스트 핸들러를 추가해서 사용해보겠다.
클래스 내에 다음 코드를 추가한다.

    MyDataRestController02.java

MySampleBean 의 필드와 count 메소드를 추가하고 있다. MySampleBean 필드는 @Autowired 로 자동 바인딩되게 설정했다.
count 에선 bean.count 를 호출하는 것이 전부다.
실제로 "/count" 에 접속해서 화면을 반복해서 새로 고침을 해보자. 표시되는 숫자가 새로 고침할 때마다 증가한다.